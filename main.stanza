; Generated by JITX 2eaba7760602d168bf12b0fa7704dcb631c4981e
#use-added-syntax(jitx)
defpackage main :
  import core
  import jitx
  import jitx/commands
  import ocdb/utils/generic-components
  import ocdb/utils/landpatterns
  import helpers

; Define the shape/size of the board
val board-shape = RoundedRectangle(15.24, 15.24, 0.5)

; Module to run as a design
pcb-module my-design :


  inst flash :  components/IS66WV1M16EALL/component
  cap-strap(flash.VDD, flash.GND, 22.0e-6)
  net gnd (flash.GND)

  val height-pins = 10
  val width-pins = 12
  val pitch = 25.4 * 0.05
  val height-header-component = pin-header(height-pins, pitch = pitch, padsize = pth-pad(0.25))
  val width-header-component = pin-header(width-pins, pitch = pitch, padsize = pth-pad(0.25))

  inst height-header : height-header-component[2]
  inst width-header : width-header-component[2]

  schematic-group(height-header) = height-header
  schematic-group(width-header) = width-header

  val x = to-double(width-pins - 1) * pitch / 2.
  val y = to-double(height-pins + 1) * pitch / 2.

  place(height-header[0]) at loc(x, 0.0) on Top
  place(height-header[1]) at loc(x * -1.0, 0.0) on Top
  place(width-header[0]) at loc(0.0, y, 90.0) on Top
  place(width-header[1]) at loc(0.0, y * -1.0, 90.0) on Top
  ; Pin mapping 

  pcb-bundle breakout :
    pin p 

  for p in pins(flash) do :
    if not no-connect?(p) :
      supports breakout :
        breakout.p => p
      
  require escape : breakout[44]

  for j in 0 to 2 do :
    for (t in pins(height-header[j]), i in (height-pins * j) to (height-pins * (1 + j))) do :
      net (t escape[i].p)

  for j in 0 to 2 do :
    for (w in pins(width-header[j]), i in (height-pins * 2 + width-pins * j) to (height-pins * 2 + width-pins * (1 + j))) do :
      net (w escape[i].p)

  geom(gnd):
    copper-pour(LayerIndex(1), isolate = 0.1, rank = 1) = board-shape



; Set the design name     - a directory with this name will be generated under the "designs" directory
;     the board           - a Board object
;     [optional] rules    - the PCB design rules (if not givn default rules will be used)
;     [optional] vendors  - Strings or AuthorizedVendors (if not give default vendors will be used)
;     [optional] quantity - Minimum stock quantity the vendor should carry (if not give default quantity will be used)
setup-design(
  "two-layer",
  ocdb/utils/defaults/default-board(ocdb/manufacturers/stackups/jlcpcb-2-layer, board-shape)
  rules = ocdb/manufacturers/rules/jlcpcb-basic-rules
)

; Set the schematic sheet size
set-paper(ANSI-A)

; Set the top level module (the module to be compile into a schematic and PCB)
set-main-module(my-design)

; Use any helper function from helpers.stanza here
; run-check-on-design(my-design)

; View the results
view-board()
view-schematic()
